import type { Configuration } from "@wandelbots/wandelbots-api-client"
import { ConnectedMotionGroup } from "./ConnectedMotionGroup"
import { NovaCellAPIClient } from "./NovaCellAPIClient"

export type NovaClientConfig = {
  /**
   * Url of the deployed Nova instance to connect to
   * e.g. https://saeattii.instance.wandelbots.io
   */
  instanceUrl: string

  /**
   * Identifier of the cell on the Nova instance to connect this client to.
   * If omitted, the default identifier "cell" is used.
   **/
  cellId?: string
} & Omit<Configuration, "isJsonMime" | "basePath">

/**
 * Client for connecting to a Nova instance and controlling robots.
 */
export class NovaClient {
  readonly api: NovaCellAPIClient
  constructor(readonly config: NovaClientConfig) {
    this.api = new NovaCellAPIClient(this.config.cellId ?? "cell", {
      ...this.config,
      basePath: this.config.instanceUrl,
      // Weird isJsonMime thing to work around bug in autogenerated API types
      isJsonMime: undefined as any,
    })
  }

  async connectMotionGroups(
    motionGroupIds: string[],
  ): Promise<ConnectedMotionGroup[]> {
    const { data: controllersRes } = await this.api.controller.listControllers()

    return Promise.all(
      motionGroupIds.map((motionGroupId) =>
        ConnectedMotionGroup.connect(
          this,
          motionGroupId,
          controllersRes.instances,
        ),
      ),
    )
  }

  async connectMotionGroup(
    motionGroupId: string,
  ): Promise<ConnectedMotionGroup> {
    const motionGroups = await this.connectMotionGroups([motionGroupId])
    return motionGroups[0]!
  }
}
